generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AgentActivity {
  id              String   @id @default(uuid())
  agentName       String
  activity        String
  description     String
  data            Json
  success         Boolean
  error           String?
  executionTimeMs Int
  confidenceScore Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LiquidityPosition {
  id                String      @id @default(uuid())
  positionNft       String      @unique
  poolAddress       String
  tokenLaunchId     String
  lowerPrice        Float
  upperPrice        Float
  liquidityAmount   BigInt
  status            String      @default("active")
  feesEarned        BigInt      @default(0)
  apr               Float       @default(0)
  capitalEfficiency Float       @default(0)
  impermanentLoss   Float       @default(0)
  lastRebalanceAt   DateTime?
  rebalanceCount    Int         @default(0)
  aiManaged         Boolean     @default(true)
  optimizationScore Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  TokenLaunch       TokenLaunch @relation(fields: [tokenLaunchId], references: [id])
}

model MLPrediction {
  id            String    @id @default(uuid())
  modelName     String
  modelVersion  String
  input         Json
  prediction    Json
  confidence    Float
  accuracy      Float?
  actualOutcome Json?
  validatedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model RiskAlert {
  id            String      @id @default(uuid())
  tokenLaunchId String
  alertType     String
  severity      String
  message       String
  indicators    Json
  confidence    Float
  acknowledged  Boolean     @default(false)
  resolvedAt    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  TokenLaunch   TokenLaunch @relation(fields: [tokenLaunchId], references: [id])
}

model TokenLaunch {
  id                  String              @id @default(uuid())
  tokenMint           String              @unique
  name                String
  symbol              String
  decimals            Int                 @default(9)
  totalSupply         BigInt
  category            String
  targetMarketCap     BigInt
  presaleMode         String?
  depositLimit        BigInt?
  graduationThreshold BigInt?
  curveType           String?
  initialPrice        Float?
  status              String              @default("pending")
  launchedAt          DateTime            @default(now())
  graduatedAt         DateTime?
  currentMarketCap    BigInt              @default(0)
  volume24h           BigInt              @default(0)
  holderCount         Int                 @default(0)
  riskScore           Float               @default(5.0)
  riskLevel           String              @default("MEDIUM")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  LiquidityPosition   LiquidityPosition[]
  RiskAlert           RiskAlert[]
  Transaction         Transaction[]
}

model Transaction {
  id            String      @id @default(uuid())
  signature     String      @unique
  tokenLaunchId String
  type          String
  amount        BigInt
  price         Float
  walletAddress String
  status        String      @default("pending")
  confirmedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  TokenLaunch   TokenLaunch @relation(fields: [tokenLaunchId], references: [id])
}

model User {
  id                   String   @id @default(uuid())
  walletAddress        String   @unique
  username             String?
  email                String?
  launchesCreated      Int      @default(0)
  totalVolume          BigInt   @default(0)
  successfulLaunches   Int      @default(0)
  riskTolerance        String   @default("medium")
  autoInvest           Boolean  @default(false)
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
